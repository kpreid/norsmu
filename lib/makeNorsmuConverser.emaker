# Copyright 2004-2007 Kevin Reid.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

pragma.syntax("0.9")

def Term             := <type:org.quasiliteral.term.Term>

def termSearch__quasiParser {
  to matchMaker(s) :any {
    def submm := term__quasiParser.matchMaker(s)
    def mm {
      to matchBind(args, specimen, optEjector) :any {
        def failure := escape fail {
          return submm.matchBind(args, specimen, fail)
        } 
        for sub in specimen.getArgs() {
          return mm.matchBind(args, sub, __continue)
        }
        throw.eject(optEjector, `$submm doesn't match anywhere in $specimen`)
      }
    }
    return mm
  }
}

def makeNorsmuConverser {
  to run(model, getMyName, stderr, optParse) {
    var addressingMe := [].asSet()

    def dohuHack := [[term`DOhU("do'u")`], []].asSet()

    def isMyName(terms) {
      return switch (terms) {
        match [term`selbri(selbri1(selbri2(selbri3(selbri4(selbri5(selbri6(tanruUnit(tanruUnit1(tanruUnit2(BRIVLA(.String.${getMyName()}, @_*)))))))))))`] + rest ? (dohuHack.contains(rest)) { true }
        match [term`sumti(sumti1(sumti2(sumti3(sumti4(sumti5(sumti6(LAClause(LAPre(LA(CMAVO(LA( "la" ))))), sumtiTail(sumtiTail1(@{selbri ? (isMyName([selbri]))})))))))))`] + rest ? (dohuHack.contains(rest)) { true }
        match _ { false }
      }
    }

    return def converser {
      to left(context) {
        addressingMe without= context
      }
      
      to run(message, optParsed :nullOk[Term], context, reply, sender) {
        var unknownMention := false

        if (optParsed =~ parsed :notNull) {
          stderr.println(parsed.asText())
          model.put(parsed)

          if (parsed =~ termSearch`free(vocative(COI(@{s :String ? (["ju'i", "re'i"].contains(s))}), NAI("nai"), DOI(*)?), @{nameTerms ? (isMyName(nameTerms))}*, DOhU?)`) {
            stderr.println(`addr- $context: ju'inai`)
            if (addressingMe.contains(context)) {
              reply("fe'o " + sender)
              addressingMe without= context
            }
          } else if (parsed =~ termSearch`free(vocative(COI(@{s :String ? (["fe'o", "co'o"].contains(s))}), DOI(*)?), @{nameTerms ? (isMyName(nameTerms))}*, DOhU(*)?)`) {
            stderr.println(`addr- $context: fe'o`)
            if (addressingMe.contains(context)) {
              reply("fe'o " + sender)
              addressingMe without= context
            }
          } else if (parsed =~ termSearch`free(vocative(COI(*)?, NAI(*)?, DOI(*)?), @{nameTerms ? (isMyName(nameTerms))}*, DOhU(*)?)`) {
            stderr.println(`addr+ $context: naming us`)
            if (!addressingMe.contains(context)) {
              reply <- ("re'i " + sender) # cheap defer till after regular msg
              addressingMe with= context
            }
          } else if (parsed =~ termSearch`free(vocative(COI(@{s ? (s != "mi'e")})?, DOI(*)?), @_+, DOhU(*)?)`) {
            stderr.println(`addr- $context: doi da poi na du mi`)
            # vocative with some name/sumti, but not us (earlier cases would catch it)
            addressingMe without= context
          } else {
            unknownMention := message.indexOf(getMyName()) != -1
          }
        
          if ((unknownMention || addressingMe.contains(context)) && optParsed != null) {
            stderr.println("handle: responding")
            reply(model.makeSentenceText())
            stderr.println("handle: done responding")
          } else {
            stderr.println(`handle: not responding (nick=${getMyName()} parsed=${optParsed != null})`)
          }
        }
      }
      
      to "private"(optParsed :nullOk[Term], reply) {
        if (optParsed =~ parsed :notNull) {
          stderr.println(parsed.asText())
          model.put(parsed)
          reply(model.makeSentenceText())
        } else {
          reply("di'u na gendra")
        }

        #reply(makeGoodSentence())
      }
    }
  }
}